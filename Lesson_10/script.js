// –†–µ–∞–ª—ñ–∑—É–π—Ç–µ –∫–ª–∞—Å Worker (–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫), —è–∫–∏–π –º–∞—Ç–∏–º–µ —Ç–∞–∫—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: name (—ñ–º'—è),
// surname (–ø—Ä—ñ–∑–≤–∏—â–µ), rate (—Å—Ç–∞–≤–∫–∞ –∑–∞ –¥–µ–Ω—å —Ä–æ–±–æ—Ç–∏), days (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏—Ö
// –¥–Ω—ñ–≤). –¢–∞–∫–æ–∂ –∫–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –º–µ—Ç–æ–¥ getSalary(), —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç–∏–º–µ –∑–∞—Ä–ø–ª–∞—Ç—É
// –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞. –ó–∞—Ä–ø–ª–∞—Ç–∞ - —Ü–µ –¥–æ–±—É—Ç–æ–∫ (–º–Ω–æ–∂–µ–Ω–Ω—è) —Å—Ç–∞–≤–∫–∏ rate –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
// –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏—Ö –¥–Ω—ñ–≤ days. –Ü –º–µ—Ç–æ–¥ getFullName() - —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞.

// class Worker {
//   constructor(name, surname, rate, days) {
//     this.name = name;
//     this.surname = surname;
//     this.rate = rate;
//     this.days = days;
//   }
//   getSalary() {
//     return this.rate * this.days;
//   }
//   get getFullName() {
//     return `${this.surname} ${this.name}`;
//   }
// }
// class Boss extends Worker {
//   constructor(name, surname, rate, days, workers) {
//     super(name, surname, rate, days);
//     this.workers = workers;
//   }
//   getSalary() {
//     return this.rate * this.days * this.workers;
//   }
// }

// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤–∏–π –∫–ª–∞—Å Boss, —Ü–µ–π –∫–ª–∞—Å —É—Å–ø–∞–¥–∫–æ–≤—É—î—Ç—å—Å—è –≤—ñ–¥ –∫–ª–∞—Å—É Worker —Ç–∞ –º–∏–Ω—É–ª–æ–≥–æ
// –∑–∞–≤–¥–∞–Ω–Ω—è. –ó'—è–≤–ª—è—î—Ç—å—Å—è –Ω–æ–≤—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: workers - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤.
// –Ü –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤–≤–∞–∂–∞—î—Ç—å—Å—è —ñ–Ω–∞–∫—à–µ: –¥–æ–±—É—Ç–æ–∫ (–º–Ω–æ–∂–µ–Ω–Ω—è) —Å—Ç–∞–≤–∫–∏ rate –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
// –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏—Ö –¥–Ω—ñ–≤ —ñ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤.

// const boss = new Boss('–Ü–≤–∞–Ω', '–Ü–≤–∞–Ω–æ–≤', 10, 31, 10);
// console.log(boss.name); //–í–∏–≤–µ–¥–µ '–Ü–≤–∞–Ω'
// console.log(boss.surname); //–í–∏–≤–µ–¥–µ '–Ü–≤–∞–Ω–æ–≤'
// console.log(boss.getFullName); //–í–∏–≤–µ–¥–µ '–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω'
// console.log(boss.rate); //–í–∏–≤–µ–¥–µ 10
// console.log(boss.days); //–í–∏–≤–µ–¥–µ 31
// console.log(boss.workers); //–í–∏–≤–µ–¥–µ 10
// console.log(boss.getSalary()); //–í–∏–≤–µ–¥–µ 3100 - —Ç–æ–±—Ç–æ 10 * 31 * 10

// const worker = new Worker('–Ü–≤–∞–Ω', '–Ü–≤–∞–Ω–æ–≤', 10, 31);
// console.log(worker.name); //–í–∏–≤–µ–¥–µ '–Ü–≤–∞–Ω'
// console.log(worker.surname); //–í–∏–≤–µ–¥–µ '–Ü–≤–∞–Ω–æ–≤'
// console.log(worker.getFullName); //–í–∏–≤–µ–¥–µ '–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω'
// console.log(worker.rate); //–í–∏–≤–µ–¥–µ 10
// console.log(worker.days); //–í–∏–≤–µ–¥–µ 31
// console.log(worker.getSalary()); //–í–∏–≤–µ–¥–µ 310 - —Ç–æ–±—Ç–æ 10 * 31

/*
  –ö–ª—ñ—î–Ω—Ç
  –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Client —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login —Ç–∞ email.
  login –º–∞—î –±—É—Ç–∏ —Å—É—Å–ø—ñ–ª—å–Ω–æ—é –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—é, –∞ email –ø—Ä–∏–≤–∞—Ç–Ω–∏–º.
  –î–æ—Å—Ç—É–ø –¥–æ email –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä —Ç–∞ —Å–µ—Ç–µ—Ä.
  –ü–µ—Ä–µ–¥ —Ç–∏–º —è–∫ –∑–º—ñ–Ω–∏—Ç–∏ –µ–º–µ–π–ª, —É —Å–µ—Ç—Ç–µ—Ä—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥, —è–∫–∏–π –≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏–º–µ —ñ–º–µ–π–ª (–Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–æ–±–∞—á–∫–∏ —Ç–∞ –∫—Ä–∞–ø–∫–∏).
  –Ø–∫—â–æ —ñ–º–µ–π–ª –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π ‚Äì –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç–∏ —ñ –≤–∏–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å 'Email is not valid!'
*/
// class Client {
//   #email;
//   constructor(login, email) {
//     this.login = login;
//     this.#email = email;
//   }
//   get email() {
//     return this.#email;
//   }
//   validation(value) {
//     return value.includes('@')&& value.includes('.') && value.length > 10;
//   }
//   set email(value) {
//     if (this.validation(value)) {
//       this.#email = value;
//     } else {
//       alert('Email is not valid!');
//     }
//   }
// }
// const client = new Client('Maks', 'maks.@gmail.com');
// console.log(client);
// client.email = 'makswewe.@gmail.com';
// console.log(client);

// const parent = {
//   name: 'parent',
//   sayHello() {
//     console.log(`I'm  ${this.name}`);
//   },
// };
// const obj = Object.create(parent);
// const copyObj = Object.assign(parent);
// console.log('obj', obj);
// console.log('copyObj', copyObj);
// copyObj.age = 22;
// console.log('copyObj', copyObj);
// console.log(parent);

// Object.create(parent) i Object.assign(parent) –∑–∞–ª–µ–∂–Ω—ñ –æ–±'—î–∫—Ç–∏ –≤ —è–∫–∏—Ö –∑–º—ñ–Ω—é—î—Ç—å—Å—è –æ–±—î–∫—Ç —ñ –ø—Ä–æ—Ç–æ—Ç–∞–π–ø —á–µ—Ä–µ–∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è ...

// class User {
//   static counter = 0;
//   static addUser() {
//     // User.counter +=1
//     this.counter += 1;
//     console.log(this.counter);
//   }
//   #email;
//   constructor(name = 'Initail value', password, email) {
//     this.#email = email;
//     this.name = name;
//     this.password = password;
//     User.addUser();
//   }
//   sayHello() {
//     console.log(`Hello I'm ${this.name}`);
//   }
//   createValue(value) {
//     this.value = value;
//   }
//   #checkEmail(value) {
//     const response = value.includes('@') && value.includes('.') && value.length > 10;
//     return response;
//   }

//   get emailValue() {
//     console.log(this.#email);
//   }

//   set emailValue(newValue) {
//     if (this.#checkEmail(newValue)) {
//       this.#email = newValue;
//     } else {
//       alert('Invalid email üò¢');
//     }
//   }
// }

// class Admin extends User {
//   constructor(name, password, email, secretPassword) {
//     super(name, password, email);
//     this.secretPassword = secretPassword;
//   }
//   deleteUser(email) {
//     console.log(email);
//   }
// }

// const artem = new User('Artem', 'qwerty', 'test@gmail.com');
// const dima = new Admin('Dima', 'ytrewq', 'test@gmail.com', '23232323');
// console.log(dima.sayHello());
// const maks = new User('Maks', 'poiuye');
// console.log(artem.name);
// artem.name = 'Oleg';
// artem.emailValue;
// artem.emailValue = 'asa';
// artem.emailValue = '1234asdfgfhkjl@gm.mm';
// artem.#checkEmail()
// console.log(artem);

// // Example 1 - –ë–ª–æ–≥–µ—Ä
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Blogger –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–ª–æ–≥–µ—Ä–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:

// email - –ø–æ—à—Ç–∞, —Ä—è–¥–æ–∫
// age - –≤—ñ–∫, —á–∏—Å–ª–æ
// numberOfPosts - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —á–∏—Å–ª–æ
// topics - –º–∞—Å–∏–≤ —Ç–µ–º –Ω–∞ —è–∫–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –±–ª–æ–≥–µ—Ä
// –ö–ª–∞—Å —á–µ–∫–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ getInfo(), —è–∫–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫: User ${–ø–æ—à—Ç–∞} is ${–≤—ñ–∫} years old and has ${–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤} posts.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ updatePostCount(value), —è–∫–∏–π —É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ value –ø—Ä–∏–π–º–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.

// class User {
//   constructor({ name, age, numberOfPosts, topics }) {
//     this.name = name;
//     this.age = age;
//     this.numberOfPosts = numberOfPosts;
//     this.topics = topics;
//   }
//   getInfo() {
//     return `User ${this.name} is ${this.age} years old and has ${this.numberOfPosts} posts.`;
//   }
//   updatePostCount(value) {
//     this.numberOfPosts += value;
//   }
// }

// const mango = new User({
//   name: 'mango@mail.com',
//   age: 24,
//   numberOfPosts: 20,
//   topics: ['tech', 'cooking'],
// });
// console.log(mango);

// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts
// mango.updatePostCount(5);
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts

// const poly = new User({
//   name: 'poly@mail.com',
//   age: 19,
//   numberOfPosts: 17,
//   topics: ['sports', 'gaming', 'health'],
// });
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts
// poly.updatePostCount(12);
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts

//
// / –û–ø–µ—Ä–∞—Ç–æ—Ä ~
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT
// Example 2 - –°—Ö–æ–≤–∏—â–µ
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Storage —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤. –ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏–º–µ –π–æ–≥–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å items.

// class Storage {
//   constructor(arr) {
//     this.items = arr;
//   }
//   get productItems() {
//     return this.items;
//   }
//   set productItems(item) {
//     if (!this.items.includes(item)) {
//       this.items.push(item);
//     }
//   }
//   removeItem(item) {
//     //  if (this.items.includes(item)) {
//     //    const idx = this.items.indexOf(item)
//     //    this.items.splice(idx,1)
//     //  }
//     const idx = this.items.indexOf(item);
//     // —Ö= 0 –Ø–∫—â–æ —ñ–Ω–¥–µ–∫—Å 0(~-1) —Ç–æ–¥—ñ -(—Ö +0),–Ø–∫—â–æ —ñ–Ω–¥–µ–∫—Å -1(~0) —Ç–æ–¥—ñ -(—Ö +1)
//     // -(idx + 1) === ~idx
//     if (!!~idx) {
//       this.items.splice(idx, 1);
//     }
//   }
// }

// // // –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:

// // getItems() - –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤.
// // // addItem(item) - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —ñ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö.
// // // removeItem(item) - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö.
// const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);

// // const items = storage.productItems;
// // console.log(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]

// // storage.productItems = 'üçå';
// // storage.productItems = 'üçã';
// // console.log(storage.items); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]

// storage.removeItem('üçã');
// console.table(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]

// Example 3 - User
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å User —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login —Ç–∞ email. –û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ #login —Ç–∞ #email, –¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç–µ—Ä —Ç–∞ —Å–µ—Ç–µ—Ä login —Ç–∞ email.

// class User {
//   #login;
//   #email;
//   constructor({ email, login }) {
//     this.#email = email;
//     this.#login = login;
//   }
//   get email() {
//     return this.#email;
//   }
//   set email(value) {
//     this.#email = value;
//   }
//   get login() {
//     return this.#login;
//   }
//   set login(value) {
//     this.#login = value;
//   }
// }

// const mango = new User({
//   login: 'Mango',
//   email: 'mango@dog.woof',
// });

// console.log(mango.login); // Mango
// mango.login = 'Mangodoge';
// console.log(mango.login); // Mangodoge

// const poly = new User({
//   login: 'Poly',
//   email: 'poly@mail.com',
// });

// console.log(poly.login); // Poly
// poly.login = 'Polycutie';
// console.log(poly.login); // Polycutie

// Example 4 - –ù–æ—Ç–∞—Ç–∫–∏
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Notes —è–∫–∏–π –∫–µ—Ä—É—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ items. –ó–∞–º—ñ—Ç–∫–∞ —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ text —Ç–∞ priority. –î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å Priority, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è –æ–±'—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.

// class Notes {
//   static Priority = {
//     LOW: 'low',
//     NORMAL: 'normal',
//     HIGH: 'high',
//   };
//   constructor(arr) {
//     this.items = arr;
//   }
//   addNote(note) {
//     if (!this.items.includes(note)) {
//       this.items.push(note);
//     }
//   }
//   removeNote(text) {
//     if (this.items.includes(text)) {
//       const idx = this.items.indexOf(text);
//       this.items.splice(idx, 1);
//     }
//   }
//   updatePriority(text, newPriority) {
//     if (this.items.includes(text)) {
//       this.items.priority = newPriority;
//     }
//   }
// }

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ addNote(note), removeNote(text) —Ç–∞ updatePriority(text, newPriority).

// const myNotes = new Notes([]);

// myNotes.addNote({ text: '–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞', priority: Notes.Priority.LOW });
// console.log(myNotes.items);

// myNotes.addNote({
//   text: '–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞',
//   priority: Notes.Priority.NORMAL,
// });
// console.log(myNotes.items);

// myNotes.removeNote('–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞');
// console.log(myNotes.items);

// myNotes.updatePriority('–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞', Notes.Priority.HIGH);
// console.log(myNotes.items);

// Example 5 - Toggle
// –ù–∞–ø–∏—à—ñ—Ç—å –∫–ª–∞—Å Toggle —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å {isOpen: boolean} —ñ –æ–≥–æ–ª–æ—à—É—î –æ–¥–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å on - —Å—Ç–∞–Ω –≤–∫–ª/–≤–∏–∫–ª (true/false). –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ on –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ false.

// class Toggle {
//   constructor(obj) {
//     this._on = obj;
//   }
//   get on() {
//     return this._on;
//   }
//   set on(newOn) {
//     this._on = newOn;
//   }
// }

// const firstToggle = new Toggle({ isOpen: true });
// console.group('firstToggle');
// console.log(firstToggle.on);
// firstToggle.toggle();
// console.log(firstToggle.on);
// console.groupEnd('firstToggle');

// const secondToggle = new Toggle();
// console.group('secondToggle');
// console.log(secondToggle.on);
// secondToggle.toggle();
// console.log(secondToggle.on);
// console.groupEnd('secondToggle');

// https://www.freecodecamp.org/ukrainian/learn/javascript-algorithms-and-data-structures/#basic-javascript
// __________________________________________ //
// -----------------------------------------TASK 1------------------------------------------//
// 1 –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ—Ç–æ–¥ –æ–±'—î–∫—Ç—É —è–∫–∏–π –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ 1 –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∑–≤—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Å–ø–∏—Åo–∫ —ñ–º–µ–Ω —É—á–Ω—ñ–≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É
// 2 –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ—Ç–æ–¥ –æ–±'—î–∫—Ç—É —è–∫–∏–π –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ 1 –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∑–≤—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—á–∫—ñ–≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
// 3 –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ—Ç–æ–¥ –æ–±'—î–∫—Ç—É —è–∫–∏–π –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ —ñ–º'—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É –≤ —è–∫–æ–≥–æ –±—ñ–ª—å—à–µ –æ—á–∫—ñ–≤

// const hogvarts = {
//   griffindor: [
//     {
//       name: 'Harry',
//       points: 17,
//     },
//     {
//       name: 'Hermiona',
//       points: 19,
//     },
//     {
//       name: 'Ron',
//       points: 14,
//     },
//   ],
//   sliserin: [
//     {
//       name: 'Draco',
//       points: 17,
//     },
//     {
//       name: 'Goyl',
//       points: 14,
//     },
//     {
//       name: 'Crabbe',
//       points: 5,
//     },
//   ],
//   getStudentsOfFaculty(facultyName) {
//     return this[facultyName].map(student => student.name);
//   },
//   getStudentsOfPoints(facultyName) {
//     return this[facultyName].reduce((acc, student) => (acc += student.points), 0);
//   },
//   getStudentsOfWinner(){
//     this['griffindor'].reduce((acc, student) => (acc += students.points), 0) >
//     this['sliserin'].reduce((acc, student) => (acc += students.points), 0)
//       ? 'Winner is Griffindor'
//       : 'Winner is Sliserin';
//   }
// };
// hogvarts.getStudentsOfFaculty('griffindor');
// hogvarts.getStudentsOfPoints('sliserin');
// hogvarts.getStudentsOfWinner();

// -----------------------------------------TASK 2------------------------------------------//
// –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
// 1 –ú–∞—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.
// 2 –ú–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏.
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —ñ–º–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—ñ –≤–∏–≤—á–∞—é—Ç—å —Ü—é –º–æ–≤—É.

// const students = [{
//     name: `Lika`,
//     language: `html`

// }, {
//     name: `Anton`,
//     language: `css`

// }, {
//     name: `Andriy`,
//     language: `js`

// }, {
//     name: `Vova`,
//     language: `html`

// }, {
//     name: `Alina`,
//     language: `css`

// }, {
//     name: `Egor`,
//     language: `js`

// }, {
//     name: `Aleksandr`,
//     langunage: `html`

// }, {
//     name: `Taras`,
//     language: `css`

// }, {
//     name: `Ivan`,
//     language: `js`

// }, {
//     name: `Make`,
//     language: `html`

// },];

// getStudentsLanguage(stud, lang) {
//   const studLang = students
//   .map(student => student.name)
//   .filter(student => student.language[`html`])

// }
// console.log(getStudentsLanguage(studLang))

// -----------------------------------------TASK 7------------------------------------------//
// –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –ø—Ä–∏–π–º–∞—î 1 –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –º—É—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤
// –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–±—Ä–∞—Ç–∏ –º–∞—Å–∏–≤ —ñ —è–∫—â–æ –≤—ñ–Ω –º–∞—î –æ–±'—î–∫—Ç–∏ –≤ —è–∫–∏—Ö –¥—É–±–ª—é—é—Ç—å—Å—è –∞–π–¥—ñ —Ç–æ –∫–≤–æ–Ω—Ç—ñ—Ç—ñ —Ü–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–ª—é—Å—É–≤–∞—Ç–∏
// –∞ —Ç—ñ –æ–±—î'–∫—Ç–∏ –≤ —è–∫–∏—Ö –∞–π–¥—ñ —Å–ø—ñ–≤–ø–∞–≤ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –º–∞—Å–∏–≤—É.
// (–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—É—Ç—É–≤–∞—Ç–∏ –º–∞—Å–∏–≤, —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ)

// const products = [
//   {
// id: 'sku1',
//     qty: 1,
//   },
//   {
//     id: 'sku2',
//     qty: 2,
//   },
//   {
//     id: 'sku3',
//     qty: 3,
//   },
//   {
//     id: 'sku1',
//     qty: 6,
//   },
//   {
//     id: 'sku1',
//     qty: 8,
//   },
//   {
//     id: 'sku2',
//     qty: 19,
//   },
//   {
//     id: 'sku4',
//     qty: 1,
//   },
// ];

// function foo(array) {
//   for (let i = 0; i < array.length; i += 1) {
//     console.log(array[i]);
//     for (let j = i + 1; j < array.length; j += 1) {
//       console.log(array[j]);
//       if (array[i].id === array[j].id) {
//         array[i].qty += array[j].qty;
//         array.splice(j, 1);
//         j -= 1;
//       }
//     }
//   }
// }
// foo(products);
// console.log(products);
